import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import seriecrypt
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
if 85 - 85: oo
def OoOoOo ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 73 - 73: Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / oo0o % IiII1i1I
 if 67 - 67: i1iI1 + i1iI1 % oo0o * ii1I1ii1IiIi1
def oO0 ( bas ) :
 seriecrypt . o00OO00 ( bas )
 if 8 - 8: oOO * Ii
 if 26 - 26: o00oO0oo0O0O0 - IIoooO0ooO0oo
def O0O000000Oo ( ) :
 import xbmc
 I1II = xbmc . Keyboard ( "" )
 I1II . doModal ( )
 I1iI1iiiIiI1 = ''
 if ( I1II . isConfirmed ( ) ) :
  I1iI1iiiIiI1 = I1II . getText ( )
 return I1iI1iiiIiI1
 if 61 - 61: oooOoO / OOO % OOoOoO0o0o0OO * oOO
 if 64 - 64: ooOooO0OOO
 if 32 - 32: II . OOO % oOO - IiII1i1I - ooOooO0OOO . oo0o
O00o0O0O = 'utf-8'
oooOOoO0Oo = '.tmp'
Ooo = 'action'
iii1II = xbmcaddon . Addon ( )
I111i11I1I = iii1II . getAddonInfo ( 'version' )
i11ii = xbmc . translatePath ( iii1II . getAddonInfo ( 'path' ) . decode ( O00o0O0O ) )
o0O0oO0 = xbmc . translatePath ( iii1II . getAddonInfo ( 'profile' ) . decode ( O00o0O0O ) )
IIIi1111iI = os . path . join ( i11ii , "resources/media/" )
if 48 - 48: iiIIi1i1Iii % OOO
ooO0 = base64 . urlsafe_b64decode ( 'JXMvYmFzX2VuYyVz' ) % ( o0O0oO0 , oooOOoO0Oo )
OO00O00000o = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" , "category" , "date(updated)" ]
if 87 - 87: ii1I1ii1IiIi1 + Ii . o00oO0oo0O0O0 * OOoOoO0o0o0OO
if not os . path . exists ( o0O0oO0 ) :
 try :
  os . makedirs ( o0O0oO0 )
 except :
  pass
OO0o = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
I11iIiIIi = sys . argv [ 0 ]
print I11iIiIIi
if 28 - 28: IIII
OoooO0O = int ( sys . argv [ 1 ] )
if 95 - 95: IiII1IiI % I1IiI1III11i
if 39 - 39: IIoooO0ooO0oo
if 40 - 40: ii1I1ii1IiIi1 * oo / I1
def I1iII1i1i ( ) :
 II1II1II1 = [ ]
 II1II1II1 . append ( { 'title' : 'Series' , Ooo : 'series' , 'ico' : 'series' , 'fan' : 'fanart_series' } )
 II1II1II1 . append ( { 'title' : 'Series Infantiles' , Ooo : 'seriesInf' , 'ico' : 'dibujos' , 'fan' : 'fanart_dibujos' } )
 II1II1II1 . append ( { 'title' : 'Series Retro' , Ooo : 'retro' , 'ico' : 'retro' , 'fan' : 'fanart_retro' } )
 II1II1II1 . append ( { 'title' : 'Buscar Serie' , Ooo : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 II1II1II1 . append ( { 'title' : 'Series Otros Idiomas' , Ooo : 'seriesByLang' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 II1II1II1 . append ( { 'title' : 'Series A-Z' , Ooo : 'seriesByAZ' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 II1II1II1 . append ( { 'title' : 'Últimos Capítulos' , Ooo : 'ultimas' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 II1II1II1 . append ( { 'title' : 'Series más vistas' , Ooo : 'masvisto' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 return II1II1II1
 if 33 - 33: oo + oOO / ooOooO0OOO + Ii + ii1I1ii1IiIi1 . ii1I1ii1IiIi1
 if 28 - 28: o00oO0oo0O0O0 + IiII1IiI + o00oO0oo0O0O0 * ii1I1ii1IiIi1 / oOO
def Iii11IiI11i ( ) :
 oO0 ( ooO0 )
 II1II1II1 = I1iII1i1i ( )
 oo0O0 = [ ]
 for Ii11 in II1II1II1 :
  I11Iii11i1Ii1 = '%s/%s.jpg' % ( IIIi1111iI , Ii11 [ 'ico' ] )
  iiII = '%s/%s.jpg' % ( IIIi1111iI , Ii11 [ 'fan' ] )
  oooO = xbmcgui . ListItem ( label = Ii11 [ 'title' ] , iconImage = I11Iii11i1Ii1 )
  oooO . setArt ( iII1I1I ( I11Iii11i1Ii1 , iiII ) )
  OO00Ooo0o = '{0}?{1}={2}' . format ( I11iIiIIi , Ooo , Ii11 [ Ooo ] )
  print OO00Ooo0o
  oO = True
  oo0O0 . append ( ( OO00Ooo0o , oooO , oO ) )
 try :
  if 23 - 23: OOoOoO0o0o0OO * Ii1I
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( OoooO0O , oo0O0 , len ( oo0O0 ) )
 xbmcplugin . endOfDirectory ( OoooO0O )
 if 33 - 33: IiII1i1I * oOO % OOO
 if 25 - 25: o00oO0oo0O0O0 % oo0o . ooOooO0OOO + IIII * o00oO0oo0O0O0 / oOO
 if 45 - 45: oo . IIII . oo
def oOOooo00Oooo ( rows = [ ] , carat = None , poste = None ) :
 try :
  xbmcplugin . setContent ( OoooO0O , "episodes" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
  if 75 - 75: IIII . oo0o . oOO + oOO + IIII . o00oO0oo0O0O0
  if 23 - 23: IiII1i1I + Ii + IiII1i1I . i1iI1 . OOO * II
  if 63 - 63: iiIIi1i1Iii / OOO + OOO * I1IiI1III11i . OOO
  if 56 - 56: i1iI1
  if 27 - 27: oooOoO % IIoooO0ooO0oo * IIoooO0ooO0oo . Ii1I
  if 10 - 10: IIII / OOO % ii1I1ii1IiIi1
  if 27 - 27: OOO - oo0o + oOO - OOO / IIII
  if 93 - 93: I1IiI1III11i
  if 11 - 11: ooOooO0OOO . oo + o00oO0oo0O0O0 - IiII1i1I / Ii1I
  if 35 - 35: o00oO0oo0O0O0 % o00oO0oo0O0O0
 oo0O0 = [ ]
 if len ( rows ) > 0 :
  for Oo0oOOOO in rows :
   o0000OO = Oo0oOOOO [ 0 ]
   i1I1ii1ii = Oo0oOOOO [ 1 ]
   i1Iii1II = Oo0oOOOO [ 2 ]
   o0O0ooo0o00 = Oo0oOOOO [ 6 ]
   Ii1I1I = Oo0oOOOO [ 7 ]
   Iii111i = Oo0oOOOO [ 8 ]
   ooO00OoOOoO = Oo0oOOOO [ 9 ]
   iII = Oo0oOOOO [ 10 ]
   O0O0oO = Oo0oOOOO [ 11 ]
   OOo0oo = Oo0oOOOO [ 12 ]
   if Iii111i :
    i1ii1 = Iii111i
   else :
    i1ii1 = str ( i1I1ii1ii ) + 'x' + i1Iii1II
    Iii111i = str ( i1I1ii1ii ) + 'x' + i1Iii1II
   if Ii1I1I == 'HD' :
    Iii111i = '[COLOR khaki]%s (HD)[/COLOR]' % Iii111i
   if not O0O0oO :
    O0O0oO = carat
   if not OOo0oo :
    OOo0oo = poste
   oooO = xbmcgui . ListItem ( label = Iii111i , iconImage = O0O0oO )
   oooO . setInfo ( 'video' , { 'title' : Iii111i , 'year' : ooO00OoOOoO , 'plot' : iII } )
   oooO . setArt ( iII1I1I ( O0O0oO , OOo0oo ) )
   oooO . setProperty ( 'IsPlayable' , 'true' )
   if isinstance ( i1ii1 , unicode ) :
    i1ii1 = i1ii1 . encode ( 'utf-8' )
   OO00Ooo0o = '{0}?{1}=play&peli={2}&tit={3}&id={4}' . format ( I11iIiIIi , Ooo , o0O0ooo0o00 ,
 base64 . urlsafe_b64encode (
 unicode ( i1ii1 , O00o0O0O ) . encode (
 O00o0O0O ) ) , o0000OO )
   oO = False
   oo0O0 . append ( ( OO00Ooo0o , oooO , oO ) )
 else :
  if 10 - 10: oooOoO + oo * oo
  oo0O0 . append ( ( '{0}' . format ( I11iIiIIi ) , xbmcgui . ListItem ( label = 'No hay elementos' ) , True ) )
 xbmcplugin . addDirectoryItems ( OoooO0O , oo0O0 , len ( oo0O0 ) )
 xbmcplugin . endOfDirectory ( OoooO0O )
 if 79 - 79: I1 / IiII1IiI / IiII1i1I
 if 9 - 9: i1iI1 + o00oO0oo0O0O0 . IiII1i1I % oooOoO . oo
def iII1I1I ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 82 - 82: I1IiI1III11i * i1iI1 - oo . iiIIi1i1Iii . ooOooO0OOO % o00oO0oo0O0O0
 if 76 - 76: oo0o % Ii1I + OOO + ii1I1ii1IiIi1
 if 67 - 67: II
def IiII ( operator , value ) :
 oO0OooO00 = sqlite3 . connect ( ooO0 )
 i1I = oO0OooO00 . cursor ( )
 i1I . execute (
 "Select " + "," . join ( OO00O00000o ) + " from series where lower(category) " + operator + " ? order by nombre asc" ,
 ( value , ) )
 IIii1iiii = i1I . fetchall ( )
 oO0OooO00 . close ( )
 O00oO ( IIii1iiii , False , True , False )
 if 53 - 53: OOO * IiII1i1I % Ii1I
 if 15 - 15: IiII1IiI + IIII * Ii1I . II
def i1iIII ( ) :
 oO0OooO00 = sqlite3 . connect ( ooO0 )
 i1I = oO0OooO00 . cursor ( )
 i1I . execute ( "Select " + "," . join ( OO00O00000o ) + " from series order by updated desc limit 200" )
 IIii1iiii = i1I . fetchall ( )
 oO0OooO00 . close ( )
 O00oO ( IIii1iiii , True , True , True )
 if 56 - 56: IiII1i1I % IiII1IiI . II / OOO
 if 26 - 26: IiII1i1I . IIII % Ii1I
def I1IiI1ii1i1i1 ( ) :
 oO0OooO00 = sqlite3 . connect ( ooO0 )
 i1I = oO0OooO00 . cursor ( )
 i1I . execute ( "Select " + "," . join ( OO00O00000o ) + " from series order by views desc, nombre asc limit 200" )
 IIii1iiii = i1I . fetchall ( )
 oO0OooO00 . close ( )
 O00oO ( IIii1iiii , True , True , False )
 if 23 - 23: II / oOO / IiII1IiI - oo0o - oo % oo
 if 94 - 94: IIoooO0ooO0oo % o00oO0oo0O0O0 * ii1I1ii1IiIi1 . oooOoO / Ii1I * OOoOoO0o0o0OO
def O00oO ( rows , category = None , lang = None , date = None ) :
 oo0O0 = [ ]
 try :
  xbmcplugin . setContent ( OoooO0O , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
 for Oo0oOOOO in rows :
  OOO0o0OO00Oo = Oo0oOOOO [ 0 ]
  I111iii1 = Oo0oOOOO [ 1 ]
  II1Ii11i1Ii1I = Oo0oOOOO [ 2 ]
  Ii11i1iIiII11 = ''
  oo0O = ''
  I1i11i1I1iIi = ''
  if category and Oo0oOOOO [ 10 ] != 'General' :
   oo0O = '[COLOR silver](%s) [/COLOR]' % ( Oo0oOOOO [ 10 ] )
  if lang and Oo0oOOOO [ 9 ] != 'Castellano' :
   Ii11i1iIiII11 = '[COLOR silver](%s) [/COLOR]' % ( Oo0oOOOO [ 9 ] )
  if date :
   I1i11i1I1iIi = '[COLOR silver](%s)[/COLOR]' % str ( Oo0oOOOO [ 11 ] )
  if II1Ii11i1Ii1I and Oo0oOOOO [ 8 ] == 'N' :
   O0oOo0O0OO = seriecrypt . oO ( II1Ii11i1Ii1I )
   if O0oOo0O0OO == 'yt' :
    O0oo00 = seriecrypt . i1I ( II1Ii11i1Ii1I )
    for OOooooo0OOO0O in xrange ( 0 , len ( O0oo00 ) ) :
     if len ( O0oo00 ) <= 1 :
      oOO0 = ''
     else :
      oOO0 = " (" + str ( OOooooo0OOO0O + 1 ) + ")"
     OO0Ooo0o0 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( I111iii1 + oOO0 , Ii11i1iIiII11 , oo0O , I1i11i1I1iIi )
     oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
     oooO . setInfo ( 'video' , { 'title' : Oo0oOOOO [ 3 ] , 'year' : Oo0oOOOO [ 4 ] , 'plot' : Oo0oOOOO [ 5 ] } )
     oooO . setArt ( iII1I1I ( Oo0oOOOO [ 6 ] , Oo0oOOOO [ 7 ] ) )
     oo0O0 . append ( ( O0oo00 [ OOooooo0OOO0O ] , oooO , True ) )
   else :
    OO0Ooo0o0 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( I111iii1 , Ii11i1iIiII11 , oo0O , I1i11i1I1iIi )
    oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
    oooO . setInfo ( 'video' , { 'title' : Oo0oOOOO [ 3 ] , 'year' : Oo0oOOOO [ 4 ] , 'plot' : Oo0oOOOO [ 5 ] } )
    oooO . setArt ( iII1I1I ( Oo0oOOOO [ 6 ] , Oo0oOOOO [ 7 ] ) )
    OO00Ooo0o = '{0}?{1}=view_serie&serie_id={2}' . format ( I11iIiIIi , Ooo , OOO0o0OO00Oo )
    oo0O0 . append ( ( OO00Ooo0o , oooO , True ) )
  else :
   OO0Ooo0o0 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( I111iii1 , Ii11i1iIiII11 , oo0O , I1i11i1I1iIi )
   oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
   oooO . setInfo ( 'video' , { 'title' : Oo0oOOOO [ 3 ] , 'year' : Oo0oOOOO [ 4 ] , 'plot' : Oo0oOOOO [ 5 ] } )
   oooO . setArt ( iII1I1I ( Oo0oOOOO [ 6 ] , Oo0oOOOO [ 7 ] ) )
   OO00Ooo0o = '{0}?{1}=serie&serie_id={2}' . format ( I11iIiIIi , Ooo , OOO0o0OO00Oo )
   oo0O0 . append ( ( OO00Ooo0o , oooO , True ) )
   if 55 - 55: IiII1i1I + IiII1IiI
   if 98 - 98: ooOooO0OOO - o00oO0oo0O0O0 * Ii1I / oo0o
   if 62 - 62: Ii
   if 45 - 45: IIII + IIII
   if 73 - 73: OOoOoO0o0o0OO
   if 62 - 62: Ii . OOoOoO0o0o0OO
   if 10 - 10: IIII
   if 72 - 72: oOO - OOO . oooOoO
   if 60 - 60: oooOoO / ii1I1ii1IiIi1 * oooOoO
 xbmcplugin . addDirectoryItems ( OoooO0O , oo0O0 , len ( oo0O0 ) )
 xbmcplugin . endOfDirectory ( OoooO0O )
 if 22 - 22: oo / IIoooO0ooO0oo - oo0o
 if 17 - 17: oOO - IIII + I1
 if 27 - 27: I1
def oo0O0ooo ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 o0oO = [ ]
 if temp_sinop == None :
  o0oO . append ( serie_sinop )
 else :
  o0oO . append ( temp_sinop )
 if temp_caratula == None :
  o0oO . append ( serie_caratula )
 else :
  o0oO . append ( temp_caratula )
 if temp_poster == None :
  o0oO . append ( serie_poster )
 else :
  o0oO . append ( temp_poster )
 return o0oO
 if 29 - 29: IIII . IiII1i1I . IiII1i1I % oo + ooOooO0OOO - ooOooO0OOO
 if 74 - 74: Ii / oooOoO
 if 40 - 40: ii1I1ii1IiIi1 / OOO - OOoOoO0o0o0OO % IIII
def iIiIiii ( serie_id ) :
 oO0OooO00 = sqlite3 . connect ( ooO0 )
 i1I = oO0OooO00 . cursor ( )
 i1I . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 IIii1iiii = i1I . fetchall ( )
 oO0OooO00 . close ( )
 oo0O0 = [ ]
 OOo0ooO00o0 = False
 if len ( IIii1iiii ) > 0 :
  if IIii1iiii [ 0 ] [ 13 ] :
   O0oOo0O0OO = seriecrypt . oO ( IIii1iiii [ 0 ] [ 13 ] )
   if O0oOo0O0OO == 'yt' :
    O0oo00 = seriecrypt . i1I ( IIii1iiii [ 0 ] [ 13 ] )
    for OOooooo0OOO0O in xrange ( 0 , len ( O0oo00 ) ) :
     if len ( O0oo00 ) <= 1 :
      oOO0 = ''
     else :
      oOO0 = " (" + str ( OOooooo0OOO0O + 1 ) + ")"
     OO0Ooo0o0 = '[COLOR gold]Lista de Capítulos %s [/COLOR]' % oOO0
     oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
     oooO . setInfo ( 'video' , { 'title' : IIii1iiii [ 0 ] [ 3 ] , 'year' : IIii1iiii [ 0 ] [ 4 ] , 'plot' : IIii1iiii [ 0 ] [ 5 ] } )
     oooO . setArt ( iII1I1I ( IIii1iiii [ 0 ] [ 6 ] , IIii1iiii [ 0 ] [ 7 ] ) )
     oo0O0 . append ( ( O0oo00 [ OOooooo0OOO0O ] , oooO , True ) )
   else :
    OO0Ooo0o0 = '[COLOR gold]Lista de Capítulos [/COLOR]'
    oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
    oooO . setInfo ( 'video' , { 'title' : IIii1iiii [ 0 ] [ 3 ] , 'year' : IIii1iiii [ 0 ] [ 4 ] , 'plot' : 'Todos los episodios de la serie' } )
    oooO . setArt ( iII1I1I ( IIii1iiii [ 0 ] [ 6 ] , IIii1iiii [ 0 ] [ 7 ] ) )
    OO00Ooo0o = '{0}?{1}=view_serie&serie_id={2}' . format ( I11iIiIIi , Ooo , serie_id )
    oo0O0 . append ( ( OO00Ooo0o , oooO , True ) )
 for Oo0oOOOO in IIii1iiii :
  OOo0ooO00o0 = False
  OOO0o0OO00Oo = Oo0oOOOO [ 0 ]
  iIII11i = Oo0oOOOO [ 1 ]
  if 68 - 68: oooOoO
  if Oo0oOOOO [ 12 ] :
   ooO0oOo0o00oo = Oo0oOOOO [ 12 ]
  else :
   ooO0oOo0o00oo = '%s %s' % ( 'Temporada' , iIII11i )
  O0O0oOo = oo0O0ooo ( Oo0oOOOO [ 5 ] , Oo0oOOOO [ 6 ] , Oo0oOOOO [ 7 ] , Oo0oOOOO [ 8 ] , Oo0oOOOO [ 9 ] , Oo0oOOOO [ 10 ] )
  if Oo0oOOOO [ 2 ] :
   oO = True
   OOo0ooO00o0 = True
   O0oOo0O0OO = seriecrypt . oO ( Oo0oOOOO [ 2 ] )
   if O0oOo0O0OO == 'yt' :
    O0oo00 = seriecrypt . i1I ( Oo0oOOOO [ 2 ] )
    for OOooooo0OOO0O in xrange ( 0 , len ( O0oo00 ) ) :
     if len ( O0oo00 ) <= 1 :
      oOO0 = ''
     else :
      oOO0 = " (" + str ( OOooooo0OOO0O + 1 ) + ")"
     OO0Ooo0o0 = '[COLOR gold]%s[/COLOR]' % ( ooO0oOo0o00oo + oOO0 )
     oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
     oooO . setInfo ( 'video' , { 'title' : Oo0oOOOO [ 3 ] , 'year' : Oo0oOOOO [ 4 ] , 'plot' : O0O0oOo [ 0 ] } )
     oooO . setArt ( iII1I1I ( O0O0oOo [ 1 ] , O0O0oOo [ 2 ] ) )
     oo0O0 . append ( ( O0oo00 [ OOooooo0OOO0O ] , oooO , True ) )
   else :
    OO0Ooo0o0 = '[COLOR gold]%s[/COLOR]' % ( ooO0oOo0o00oo )
    oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
    oooO . setInfo ( 'video' , { 'title' : Oo0oOOOO [ 3 ] , 'year' : Oo0oOOOO [ 4 ] , 'plot' : O0O0oOo [ 0 ] } )
    oooO . setArt ( iII1I1I ( O0O0oOo [ 1 ] , O0O0oOo [ 2 ] ) )
    OO00Ooo0o = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( I11iIiIIi , Ooo , OOO0o0OO00Oo , iIII11i )
    oo0O0 . append ( ( OO00Ooo0o , oooO , oO ) )
  if Oo0oOOOO [ 11 ] == 'Y' :
   OO0Ooo0o0 = '[COLOR gold]%s [/COLOR]' % ( ooO0oOo0o00oo )
   if Oo0oOOOO [ 2 ] :
    OO0Ooo0o0 = '%s [COLOR white](Alternativo)[/COLOR]' % ( OO0Ooo0o0 )
   oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
   oooO . setInfo ( 'video' , { 'title' : Oo0oOOOO [ 3 ] , 'year' : Oo0oOOOO [ 4 ] , 'plot' : O0O0oOo [ 0 ] } )
   oooO . setArt ( iII1I1I ( O0O0oOo [ 1 ] , O0O0oOo [ 2 ] ) )
   OO00Ooo0o = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( I11iIiIIi , Ooo , OOO0o0OO00Oo , iIII11i ,
 O0O0oOo [ 1 ] , O0O0oOo [ 2 ] )
   oO = True
   OOo0ooO00o0 = True
   oo0O0 . append ( ( OO00Ooo0o , oooO , oO ) )
 try :
  xbmcplugin . setContent ( OoooO0O , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
 if OOo0ooO00o0 :
  xbmcplugin . addDirectoryItems ( OoooO0O , oo0O0 , len ( oo0O0 ) )
  xbmcplugin . endOfDirectory ( OoooO0O )
 else :
  xbmc . log ( "[addon.Series-%s]: No info found for serie %s " % ( I111i11I1I , serie_id ) )
  if 65 - 65: I1IiI1III11i / IiII1IiI + oo
  if 59 - 59: ooOooO0OOO
  if 16 - 16: oo * Ii
def Oo0oOOoOOO ( serie_id , temp_id , caratula , poster ) :
 IIii1iiii = I1I1111I ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "quality" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" ] , [ "serie_id" , "temp_id" ] , [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] )
 oOOooo00Oooo ( IIii1iiii , caratula , poster )
 if 86 - 86: OOoOoO0o0o0OO . IiII1IiI - OOO - IIII
 if 75 - 75: o00oO0oo0O0O0 + IIoooO0ooO0oo
 if 19 - 19: IIII - oo0o . i1iI1
def IIIi ( serie_id , temp_id ) :
 oO0OooO00 = sqlite3 . connect ( ooO0 )
 i1I = oO0OooO00 . cursor ( )
 i1I . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, '', series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 IIii1iiii = i1I . fetchall ( )
 oO0OooO00 . close ( )
 O0O0oOo = oo0O0ooo ( IIii1iiii [ 0 ] [ 10 ] , IIii1iiii [ 0 ] [ 11 ] , IIii1iiii [ 0 ] [ 12 ] , IIii1iiii [ 0 ] [ 13 ] , IIii1iiii [ 0 ] [ 14 ] , IIii1iiii [ 0 ] [ 15 ] )
 i1II1IiI1iI = seriecrypt . ii1iiIii1i1i ( IIii1iiii [ 0 ] [ 6 ] , ooO0 , serie_id , temp_id )
 iI = [ None ] * len ( i1II1IiI1iI )
 for OOooooo0OOO0O in xrange ( 0 , len ( i1II1IiI1iI ) ) :
  iI [ OOooooo0OOO0O ] = list ( IIii1iiii [ 0 ] [ : len ( IIii1iiii [ 0 ] ) - 3 ] )
  iI [ OOooooo0OOO0O ] [ 10 ] = O0O0oOo [ 0 ]
  iI [ OOooooo0OOO0O ] [ 11 ] = O0O0oOo [ 1 ]
  iI [ OOooooo0OOO0O ] [ 12 ] = O0O0oOo [ 2 ]
  iI [ OOooooo0OOO0O ] [ 6 ] = i1II1IiI1iI [ OOooooo0OOO0O ] [ 1 ]
  iI [ OOooooo0OOO0O ] [ 8 ] = i1II1IiI1iI [ OOooooo0OOO0O ] [ 0 ]
  iI [ OOooooo0OOO0O ] [ 10 ] = ''
 oOOooo00Oooo ( iI )
 if 4 - 4: IiII1i1I / OOoOoO0o0o0OO - Ii1I - I1IiI1III11i
 if 22 - 22: oo0o * oOO . Ii1I - i1iI1 - Ii - o00oO0oo0O0O0
 if 23 - 23: ii1I1ii1IiIi1 + ooOooO0OOO + OOoOoO0o0o0OO
def O000oOOo ( serie_id ) :
 IIii1iiii = I1I1111I ( "series" , [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "''" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 55 - 55: oooOoO
 if 41 - 41: ii1I1ii1IiIi1 . IiII1IiI % OOoOoO0o0o0OO + oo0o
 i1II1IiI1iI = seriecrypt . ii1iiIii1i1i ( IIii1iiii [ 0 ] [ 6 ] , ooO0 , serie_id )
 iI = [ None ] * len ( i1II1IiI1iI )
 for OOooooo0OOO0O in xrange ( 0 , len ( i1II1IiI1iI ) ) :
  iI [ OOooooo0OOO0O ] = list ( IIii1iiii [ 0 ] [ : ] )
  iI [ OOooooo0OOO0O ] [ 6 ] = i1II1IiI1iI [ OOooooo0OOO0O ] [ 1 ]
  iI [ OOooooo0OOO0O ] [ 8 ] = i1II1IiI1iI [ OOooooo0OOO0O ] [ 0 ]
  iI [ OOooooo0OOO0O ] [ 10 ] = ''
 oOOooo00Oooo ( iI )
 if 36 - 36: IIoooO0ooO0oo + II
 if 66 - 66: IIoooO0ooO0oo . i1iI1 - OOoOoO0o0o0OO . II % IIII
def i11II1IIiii1i ( ) :
 ooOO = O0O000000Oo ( )
 if ooOO :
  oO0OooO00 = sqlite3 . connect ( ooO0 )
  i1I = oO0OooO00 . cursor ( )
  if 14 - 14: OOO * IiII1IiI + OOO % Ii1I - Ii1I
  ooOO = '%' + ooOO + '%'
  try :
   i1I . execute ( "Select " + "," . join ( OO00O00000o ) + " from series where nombre like ? order by nombre asc" , ( unicode ( ooOO . decode ( 'utf-8' ) ) , ) )
  except :
   i1I . execute ( "Select " + "," . join ( OO00O00000o ) + " from series where nombre like ? order by nombre asc" , ( OoOoOo ( unicode ( ooOO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  IIii1iiii = i1I . fetchall ( )
  if len ( IIii1iiii ) == 0 :
   i1I . execute ( "Select " + "," . join ( OO00O00000o ) + " from series where nombre like ? order by nombre asc" ,
 ( OoOoOo ( unicode ( ooOO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   IIii1iiii = i1I . fetchall ( )
  oO0OooO00 . close ( )
  O00oO ( IIii1iiii , True , True , False )
  if 59 - 59: oo0o * IIoooO0ooO0oo + oo0o * IIoooO0ooO0oo / IiII1IiI * OOO
def IiI11iiI1i1 ( audio = None , category = 'General' ) :
 if not audio :
  oO0OooO00 = sqlite3 . connect ( ooO0 )
  i1I = oO0OooO00 . cursor ( )
  i1I . execute ( "Select audio,count(audio) from series where audio!='Castellano' group by audio order by audio" )
  IIii1iiii = i1I . fetchall ( )
  oO0OooO00 . close ( )
  oo0O0 = [ ]
  for Oo0oOOOO in IIii1iiii :
   audio = Oo0oOOOO [ 0 ]
   oOo = Oo0oOOOO [ 1 ]
   OO0Ooo0o0 = '[COLOR gold]%s[/COLOR] (%s)' % ( audio , oOo )
   oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
   OO00Ooo0o = '{0}?action=seriesByLang&lang={1}' . format ( I11iIiIIi , audio )
   oO = True
   oo0O0 . append ( ( OO00Ooo0o , oooO , oO ) )
  try :
   if 43 - 43: II + oooOoO * I1IiI1III11i * IiII1i1I
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( OoooO0O , oo0O0 , len ( oo0O0 ) )
  xbmcplugin . endOfDirectory ( OoooO0O )
 else :
  IIii1iiii = I1I1111I ( "series" , OO00O00000o , [ "audio" ] , [ audio ] , [ "nombre" ] )
  O00oO ( IIii1iiii , True , None , False )
  if 71 - 71: oo . o00oO0oo0O0O0 + IIII
  if 17 - 17: i1iI1 * oo0o . Ii1I - OOO * ooOooO0OOO
def oO0oo ( letra = None ) :
 O00O0oOoOo0 = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 o0 = '!0-9..'
 IiIIII1IiI1 = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if 14 - 14: oo
 if not letra :
  i1III11I1i = "" . join ( [ "When " + Oo + " Then '" + OOooooo0OOO0O + "'" for OOooooo0OOO0O , Oo in O00O0oOoOo0 . iteritems ( ) ] )
  oO0OooO00 = sqlite3 . connect ( ooO0 )
  i1I = oO0OooO00 . cursor ( )
  i1I . execute ( "select alfa, count (alfa) from (select CASE " + i1III11I1i + " WHEN " + IiIIII1IiI1 + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, serie_id from series) group by alfa order by alfa" )
  IIii1iiii = i1I . fetchall ( )
  oO0OooO00 . close ( )
  oo0O0 = [ ]
  for Oo0oOOOO in IIii1iiii :
   letra = Oo0oOOOO [ 0 ]
   oOo = Oo0oOOOO [ 1 ]
   OO0Ooo0o0 = '[COLOR gold]%s[/COLOR] (%s)' % ( letra , oOo )
   oooO = xbmcgui . ListItem ( label = OO0Ooo0o0 , iconImage = '' )
   OO00Ooo0o = '{0}?action=seriesByAZ&letra={1}' . format ( I11iIiIIi , letra )
   oO = True
   oo0O0 . append ( ( OO00Ooo0o , oooO , oO ) )
  try :
   if 42 - 42: Ii1I
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( OoooO0O , oo0O0 , len ( oo0O0 ) )
  xbmcplugin . endOfDirectory ( OoooO0O )
 else :
  oO0OooO00 = sqlite3 . connect ( ooO0 )
  i1I = oO0OooO00 . cursor ( )
  if letra in O00O0oOoOo0 :
   O00O0oOoOo0 [ letra ] = O00O0oOoOo0 [ letra ] + ' OR'
  elif letra == o0 :
   O00O0oOoOo0 [ letra ] = "AND" . join ( [ " NOT ( " + Oo + ") " for OOooooo0OOO0O , Oo in O00O0oOoOo0 . iteritems ( ) ] ) + " AND NOT (" + IiIIII1IiI1 + ") OR"
  else :
   O00O0oOoOo0 [ letra ] = ''
  i1I . execute ( "select " + "," . join ( OO00O00000o ) + " from series where " + O00O0oOoOo0 [ letra ] + " upper(substr(nombre, 1, 1)) == ?" , ( letra , ) )
  IIii1iiii = i1I . fetchall ( )
  oO0OooO00 . close ( )
  O00oO ( IIii1iiii , True , True , False )
  if 29 - 29: II * Ii + II . oo * IiII1i1I
def I1I1111I ( table , values , ids , ids_value , order ) :
 O0ooo00Ooo = sqlite3 . connect ( ooO0 )
 i1I = O0ooo00Ooo . cursor ( )
 i1I . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + ( " = ? and " . join ( ids ) + "=?" ) + "order by " + "," . join ( order ) + " asc" , ids_value )
 IIii1iiii = i1I . fetchall ( )
 O0ooo00Ooo . close ( )
 return IIii1iiii
 if 8 - 8: ooOooO0OOO - OOO
 if 10 - 10: OOoOoO0o0o0OO % o00oO0oo0O0O0 + Ii / IIII - oo0o % oooOoO
def Ii111I1IIi1 ( pel , tit , id ) :
 seriecrypt . oo0O0ooo ( pel , tit , ooO0 , id )
 if 59 - 59: ooOooO0OOO
 if 42 - 42: iiIIi1i1Iii % o00oO0oo0O0O0 - OOoOoO0o0o0OO
def iii ( paramstring ) :
 iI11IIi11 = dict ( parse_qsl ( paramstring ) )
 if iI11IIi11 :
  if iI11IIi11 [ Ooo ] == 'series' :
   IiII ( '==' , 'general' )
  elif iI11IIi11 [ Ooo ] == 'seriesInf' :
   IiII ( '==' , 'infantil' )
  elif iI11IIi11 [ Ooo ] == 'retro' :
   IiII ( '==' , 'retro' )
  elif iI11IIi11 [ Ooo ] == 'searchSerie' :
   i11II1IIiii1i ( )
  elif iI11IIi11 [ Ooo ] == 'seriesByLang' :
   if 'lang' in iI11IIi11 :
    IiI11iiI1i1 ( iI11IIi11 [ 'lang' ] )
   else :
    IiI11iiI1i1 ( )
  elif iI11IIi11 [ Ooo ] == 'seriesByAZ' :
   if 'letra' in iI11IIi11 :
    oO0oo ( iI11IIi11 [ 'letra' ] )
   else :
    oO0oo ( )
  elif iI11IIi11 [ Ooo ] == 'masvisto' :
   I1IiI1ii1i1i1 ( )
  elif iI11IIi11 [ Ooo ] == 'ultimas' :
   i1iIII ( )
  elif iI11IIi11 [ Ooo ] == 'serie' :
   iIiIiii ( iI11IIi11 [ 'serie_id' ] )
  elif iI11IIi11 [ Ooo ] == 'view_serie' :
   O000oOOo ( iI11IIi11 [ 'serie_id' ] )
  elif iI11IIi11 [ Ooo ] == 'view_temp' :
   IIIi ( iI11IIi11 [ 'serie_id' ] , iI11IIi11 [ 'temp_id' ] )
  elif iI11IIi11 [ Ooo ] == 'list_temp' :
   Oo0oOOoOOO ( iI11IIi11 [ 'serie_id' ] , iI11IIi11 [ 'temp_id' ] , iI11IIi11 [ 'caratula' ] , iI11IIi11 [ 'poster' ] )
  elif iI11IIi11 [ Ooo ] == 'play' :
   Ii111I1IIi1 ( iI11IIi11 [ 'peli' ] , iI11IIi11 [ 'tit' ] , iI11IIi11 [ 'id' ] )
 else :
  Iii11IiI11i ( )
  if 27 - 27: oOO
  if 78 - 78: oo0o . IIII . ii1I1ii1IiIi1
if __name__ == '__main__' :
 iii ( sys . argv [ 2 ] [ 1 : ] )
 if 9 - 9: iiIIi1i1Iii
 if 16 - 16: ooOooO0OOO * ii1I1ii1IiIi1
 if 2 - 2: I1 + II - Ii
 if 57 - 57: oooOoO
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')